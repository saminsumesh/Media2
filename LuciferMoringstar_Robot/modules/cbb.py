import asyncio
import base64
from pyrogram import Client, filters, __version__
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram.errors import FloodWait

from main import LuciferMoringstar
from config import CHANNEL_ID


@LuciferMoringstar.on_message(filters.private & ~filters.command(['start','batch']))
async def channel_post(client: Client, message: Message):
    reply_text = await message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...!", quote = True)
    try:
        post_message = await message.copy(chat_id = CHANNEL_ID, disable_notification=True)
    except FloodWait as e:
        await asyncio.sleep(e.x)
        post_message = await message.copy(chat_id = CHANNEL_ID, disable_notification=True)
    except:
        await reply_text.edit_text("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫..!")
        return
    string = f"get-{post_message.message_id}"
    string_bytes = string.encode("ascii")
    base64_bytes = base64.b64encode(string_bytes)
    base64_string = base64_bytes.decode("ascii")
    link = f"https://t.me/{client.username}?start={base64_string}"
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –°—Å—ã–ª–∫–∞", url=f'https://telegram.me/share/url?url={link}')]])
    await reply_text.edit(f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É</b>\n\n{link}", reply_markup=reply_markup, disable_web_page_preview = True)


@LuciferMoringstar.on_message(filters.private & filters.command('batch'))
async def batch(client: Client, message: Message):
    while True:
        try:
            first_message = await client.ask(text = "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏)..", chat_id = message.from_user.id, filters=filters.forwarded, timeout=30)
        except:
            return
        if first_message.forward_from_chat:
            if first_message.forward_from_chat.id == CHANNEL_ID:
                f_msg_id = first_message.forward_from_message_id
                break
        await first_message.reply_text("–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...", quote = True)
        continue
    while True:
        try:
            second_message = await client.ask(text = "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ (–∏–ª–∏ –∑–∞–º–µ—Ç–æ–∫)..", chat_id = message.from_user.id, filters=filters.forwarded, timeout=30)
        except:
            return
        if second_message.forward_from_chat:
            if second_message.forward_from_chat.id == CHANNEL_ID:
                s_msg_id = second_message.forward_from_message_id
                break
        await second_message.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...", quote = True)
        continue
    string = f"get-{f_msg_id}-{s_msg_id}"
    string_bytes = string.encode("ascii")
    base64_bytes = base64.b64encode(string_bytes)
    base64_string = base64_bytes.decode("ascii")
    link = f"https://t.me/{client.username}?start={base64_string}"
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –°—Å—ã–ª–∫–∞", url=f'https://telegram.me/share/url?url={link}')]])
    await second_message.reply_text(f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ</b>\n\n{link}", quote=True, reply_markup=reply_markup)
